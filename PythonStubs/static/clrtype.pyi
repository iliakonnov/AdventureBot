from _typeshed import Incomplete
from collections.abc import Generator

class TypedFunction:
    function: Incomplete
    is_static: Incomplete
    prop_name_if_prop_get: Incomplete
    prop_name_if_prop_set: Incomplete
    def __init__(self, function, is_static: bool = ..., prop_name_if_prop_get: Incomplete | None = ..., prop_name_if_prop_set: Incomplete | None = ...) -> None: ...

class ClrType(type):
    def is_typed_method(self, function): ...
    def get_typed_properties(self) -> Generator[Incomplete, None, None]: ...
    def emit_properties(self, typebld) -> None: ...
    def emit_property(self, typebld, prop, name, clrtype) -> None: ...
    def dummy_function(self) -> None: ...
    def get_typed_methods(self) -> Generator[Incomplete, None, None]: ...
    emitted_methods: Incomplete
    def emit_methods(self, typebld) -> None: ...
    def emit_classattribs(self, typebld) -> None: ...
    def get_clr_type_name(self): ...
    def create_type(self, typebld): ...

class ClrInterface(ClrType):
    def __init__(self, *args): ...
    def emit_method(self, typebld, function_info): ...
    def emit_members(self, typebld) -> None: ...
    def map_members(self, new_type) -> None: ...
    interface_module_builder: Incomplete
    @staticmethod
    def define_interface(typename, bases): ...
    def map_clr_type(self, clr_type) -> None: ...
    def __clrtype__(self): ...

class ClrClass(ClrInterface):
    dynamic_operations_field: Incomplete
    def emit_fields(self, typebld) -> None: ...
    def map_fields(self, new_type) -> None: ...
    @staticmethod
    def get_dynamic_operations_field(): ...
    def emit_typed_stub_to_python_method(self, typebld, function_info): ...
    def emit_method(self, typebld, function_info): ...
    def map_pinvoke_methods(self, new_type) -> None: ...
    def emit_python_type_field(self, typebld): ...
    PythonType: Incomplete
    def set_python_type_field(self, new_type) -> None: ...
    def add_wrapper_ctors(self, baseType, typebld) -> None: ...
    def emit_members(self, typebld) -> None: ...
    def map_members(self, new_type) -> None: ...
    baseType: Incomplete
    def __clrtype__(self): ...

def accepts(*args): ...
def returns(return_type=...): ...

class CustomAttributeDecorator:
    attrib_type: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, attrib_type, *args, **kwargs) -> None: ...
    def __call__(self, function): ...
    def GetBuilder(self): ...

def attribute(attrib_type): ...
def propagate_attributes(old_function, new_function) -> None: ...
