from __future__ import annotations
import typing, abc, enum
from stubhelper import *

import System
import System.Threading
import System.Threading.Tasks
import System.Runtime.CompilerServices
import System.Collections.Generic


class TaskStateFlags(enum.Enum, System.IComparable, System.IFormattable, System.IConvertible, System.Enum):
    OptionsMask: int = ...
    Started: int = ...
    DelegateInvoked: int = ...
    Disposed: int = ...
    ExceptionObservedByParent: int = ...
    CancellationAcknowledged: int = ...
    Faulted: int = ...
    Canceled: int = ...
    WaitingOnChildren: int = ...
    RanToCompletion: int = ...
    CompletedMask: int = ...
    WaitingForActivation: int = ...
    CompletionReserved: int = ...
    WaitCompletionNotification: int = ...
    ExecutionContextIsNull: int = ...
    TaskScheduledWasFired: int = ...

class ContingentProperties(System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        self.m_capturedContext: System.Threading.ExecutionContext
        self.m_completionEvent: System.Threading.ManualResetEventSlim
        self.m_exceptionsHolder: System.Threading.Tasks.TaskExceptionHolder
        self.m_cancellationToken: System.Threading.CancellationToken
        self.m_cancellationRegistration: System.Runtime.CompilerServices.StrongBox[System.Threading.CancellationTokenRegistration]
        self.m_internalCancellationRequested: int
        self.m_completionCountdown: int
        self.m_exceptionalChildren: System.Collections.Generic.List[System.Threading.Tasks.Task]
        self.m_parent: System.Threading.Tasks.Task
        ...

    # static fields

    # properties
    # methods
    def __init__(self, ):
        ...

    def SetCompleted(self, ) -> None:
        ...

    def UnregisterCancellationCallback(self, ) -> None:
        ...

