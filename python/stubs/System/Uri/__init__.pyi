from __future__ import annotations
import typing, abc, enum
from stubhelper import *

import System
import System.Uri


class Check(enum.Enum, System.IComparable, System.IFormattable, System.IConvertible, System.Enum):
    None_: int = ...
    EscapedCanonical: int = ...
    DisplayCanonical: int = ...
    DotSlashAttn: int = ...
    FoundNonAscii: int = ...
    BackslashInPath: int = ...
    ReservedFound: int = ...
    NotIriCanonical: int = ...
    DotSlashEscaped: int = ...

class UriInfo(System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        self.Offset: System.Uri.Offset
        self.String: str
        self.Host: str
        self.IdnHost: str
        self.PathAndQuery: str
        self.ScopeId: str
        ...

    # static fields

    # properties
    @property
    def MoreInfo(self) -> System.Uri.MoreInfo:
        ...

    # methods
    def __init__(self, ):
        ...

class Offset(System.ValueType):
    @typing.overload
    def __init__(self, **kwargs):
        self.Scheme: int
        self.User: int
        self.Host: int
        self.PortValue: int
        self.Path: int
        self.Query: int
        self.Fragment: int
        self.End: int
        ...

    # static fields

    # properties
    # methods
class MoreInfo(System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        self.Path: str
        self.Query: str
        self.Fragment: str
        self.AbsoluteUri: str
        self.RemoteUrl: str
        ...

    # static fields

    # properties
    # methods
    def __init__(self, ):
        ...

class Flags(enum.Enum, System.IComparable, System.IFormattable, System.IConvertible, System.Enum):
    Zero: int = ...
    HostNotParsed: int = ...
    SchemeNotCanonical: int = ...
    UserNotCanonical: int = ...
    HostNotCanonical: int = ...
    PortNotCanonical: int = ...
    PathNotCanonical: int = ...
    QueryNotCanonical: int = ...
    FragmentNotCanonical: int = ...
    CannotDisplayCanonical: int = ...
    E_UserNotCanonical: int = ...
    E_HostNotCanonical: int = ...
    E_PortNotCanonical: int = ...
    E_PathNotCanonical: int = ...
    E_QueryNotCanonical: int = ...
    E_FragmentNotCanonical: int = ...
    E_CannotDisplayCanonical: int = ...
    ShouldBeCompressed: int = ...
    FirstSlashAbsent: int = ...
    BackslashInPath: int = ...
    IndexMask: int = ...
    IPv6HostType: int = ...
    IPv4HostType: int = ...
    DnsHostType: int = ...
    UncHostType: int = ...
    BasicHostType: int = ...
    UnusedHostType: int = ...
    UnknownHostType: int = ...
    HostTypeMask: int = ...
    UserEscaped: int = ...
    AuthorityFound: int = ...
    HasUserInfo: int = ...
    LoopbackHost: int = ...
    NotDefaultPort: int = ...
    UserDrivenParsing: int = ...
    CanonicalDnsHost: int = ...
    ErrorOrParsingRecursion: int = ...
    DosPath: int = ...
    UncPath: int = ...
    ImplicitFile: int = ...
    MinimalUriInfoSet: int = ...
    AllUriInfoSet: int = ...
    IdnHost: int = ...
    HasUnicode: int = ...
    HostUnicodeNormalized: int = ...
    RestUnicodeNormalized: int = ...
    UnicodeHost: int = ...
    IntranetUri: int = ...
    UserIriCanonical: int = ...
    PathIriCanonical: int = ...
    QueryIriCanonical: int = ...
    FragmentIriCanonical: int = ...
    IriCanonical: int = ...
    UnixPath: int = ...
    DisablePathAndQueryCanonicalization: int = ...
    CustomParser_ParseMinimalAlreadyCalled: int = ...
    Debug_LeftConstructor: int = ...

