from __future__ import annotations
import typing, abc, enum
from stubhelper import *

import IronPython.Runtime
import IronPython.Runtime.Types
import System.Dynamic
import IronPython.Runtime.Exceptions.PythonExceptions
import System
import IronPython.Runtime.Exceptions
import System.Collections.Generic
import System.Linq.Expressions


class _SystemExit(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def code(self) -> System.Object:
        ...
    @code.setter
    def code(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

class _UnicodeEncodeError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def start(self) -> System.Object:
        ...
    @start.setter
    def start(self, val: System.Object):
        ...

    @property
    def reason(self) -> System.Object:
        ...
    @reason.setter
    def reason(self, val: System.Object):
        ...

    @property
    def object(self) -> System.Object:
        ...
    @object.setter
    def object(self, val: System.Object):
        ...

    @property
    def end(self) -> System.Object:
        ...
    @end.setter
    def end(self, val: System.Object):
        ...

    @property
    def encoding(self) -> System.Object:
        ...
    @encoding.setter
    def encoding(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def InitializeFromClr(self, exception: System.Exception, ) -> None:
        ...

    def ToString(self, ) -> str:
        ...

    @typing.overload
    def __init__(self, encoding: System.Object, object: System.Object, start: System.Object, end: System.Object, reason: System.Object, ) -> None:
        ...

    @typing.overload
    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

class _StopIteration(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def value(self) -> System.Object:
        ...
    @value.setter
    def value(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

class _UnicodeDecodeError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def start(self) -> System.Object:
        ...
    @start.setter
    def start(self, val: System.Object):
        ...

    @property
    def reason(self) -> System.Object:
        ...
    @reason.setter
    def reason(self, val: System.Object):
        ...

    @property
    def object(self) -> System.Object:
        ...
    @object.setter
    def object(self, val: System.Object):
        ...

    @property
    def end(self) -> System.Object:
        ...
    @end.setter
    def end(self, val: System.Object):
        ...

    @property
    def encoding(self) -> System.Object:
        ...
    @encoding.setter
    def encoding(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def InitializeFromClr(self, exception: System.Exception, ) -> None:
        ...

    def ToString(self, ) -> str:
        ...

    @typing.overload
    def __init__(self, encoding: System.Object, object: System.Object, start: System.Object, end: System.Object, reason: System.Object, ) -> None:
        ...

    @typing.overload
    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

class _SyntaxError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def text(self) -> System.Object:
        ...
    @text.setter
    def text(self, val: System.Object):
        ...

    @property
    def print_file_and_line(self) -> System.Object:
        ...
    @print_file_and_line.setter
    def print_file_and_line(self, val: System.Object):
        ...

    @property
    def filename(self) -> System.Object:
        ...
    @filename.setter
    def filename(self, val: System.Object):
        ...

    @property
    def lineno(self) -> System.Object:
        ...
    @lineno.setter
    def lineno(self, val: System.Object):
        ...

    @property
    def offset(self) -> System.Object:
        ...
    @offset.setter
    def offset(self, val: System.Object):
        ...

    @property
    def msg(self) -> System.Object:
        ...
    @msg.setter
    def msg(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def ToString(self, ) -> str:
        ...

    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

class BaseException(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields
    __doc__: str = ...

    # properties
    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def Dict(self) -> IronPython.Runtime.PythonDictionary:
        ...

    @property
    def PythonType(self) -> IronPython.Runtime.Types.PythonType:
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    @staticmethod
    @typing.overload
    def __new__(cls: IronPython.Runtime.Types.PythonType, argsø: System.Array[System.Object], ) -> System.Object:
        ...

    @staticmethod
    @typing.overload
    def __new__(cls: IronPython.Runtime.Types.PythonType, kwArgsø: System.Collections.Generic.IDictionary[str, System.Object], argsø: System.Array[System.Object], ) -> System.Object:
        ...

    def __init__(self, argsø: System.Array[System.Object], ) -> None:
        ...

    def with_traceback(self, tb: IronPython.Runtime.Exceptions.TraceBack, ) -> System.Object:
        ...

    def __reduce__(self, ) -> System.Object:
        ...

    def __reduce_ex__(self, protocol: int, ) -> System.Object:
        ...

    def __setstate__(self, state: IronPython.Runtime.PythonDictionary, ) -> None:
        ...

    def ToString(self, ) -> str:
        ...

    def EnsureDict(self, ) -> None:
        ...

    def __repr__(self, context: IronPython.Runtime.CodeContext, ) -> str:
        ...

    def SetDict(self, dict: IronPython.Runtime.PythonDictionary, ) -> IronPython.Runtime.PythonDictionary:
        ...

    def ReplaceDict(self, dict: IronPython.Runtime.PythonDictionary, ) -> bool:
        ...

    def SetPythonType(self, newType: IronPython.Runtime.Types.PythonType, ) -> None:
        ...

    def GetSlots(self, ) -> System.Array[System.Object]:
        ...

    def GetSlotsCreate(self, ) -> System.Array[System.Object]:
        ...

    def InitializeFromClr(self, exception: System.Exception, ) -> None:
        ...

    def GetClrException(self, innerException: System.Exception = ..., ) -> System.Exception:
        ...

    def CreateClrExceptionWithCause(self, cause: IronPython.Runtime.Exceptions.PythonExceptions.BaseException, context: IronPython.Runtime.Exceptions.PythonExceptions.BaseException, suppressContext: bool, ) -> System.Exception:
        ...

    def InitAndGetClrException(self, args: System.Array[System.Object], ) -> System.Exception:
        ...

    def GetMetaObject(self, parameter: System.Linq.Expressions.Expression, ) -> System.Dynamic.DynamicMetaObject:
        ...

    def GetWeakRef(self, ) -> IronPython.Runtime.WeakRefTracker:
        ...

    def SetWeakRef(self, value: IronPython.Runtime.WeakRefTracker, ) -> bool:
        ...

    def SetFinalizer(self, value: IronPython.Runtime.WeakRefTracker, ) -> None:
        ...

class _ImportError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def name(self) -> System.Object:
        ...
    @name.setter
    def name(self, val: System.Object):
        ...

    @property
    def path(self) -> System.Object:
        ...
    @path.setter
    def path(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def __init__(self, kwargs: System.Collections.Generic.IDictionary[str, System.Object], args: System.Array[System.Object], ) -> None:
        ...

class _OSError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields
    ERROR_FILE_NOT_FOUND: int = ...
    ERROR_PATH_NOT_FOUND: int = ...
    ERROR_TOO_MANY_OPEN_FILES: int = ...
    ERROR_ACCESS_DENIED: int = ...
    ERROR_INVALID_HANDLE: int = ...
    ERROR_ARENA_TRASHED: int = ...
    ERROR_NOT_ENOUGH_MEMORY: int = ...
    ERROR_INVALID_BLOCK: int = ...
    ERROR_BAD_ENVIRONMENT: int = ...
    ERROR_BAD_FORMAT: int = ...
    ERROR_INVALID_DRIVE: int = ...
    ERROR_CURRENT_DIRECTORY: int = ...
    ERROR_NOT_SAME_DEVICE: int = ...
    ERROR_NO_MORE_FILES: int = ...
    ERROR_WRITE_PROTECT: int = ...
    ERROR_BAD_UNIT: int = ...
    ERROR_NOT_READY: int = ...
    ERROR_BAD_COMMAND: int = ...
    ERROR_CRC: int = ...
    ERROR_BAD_LENGTH: int = ...
    ERROR_SEEK: int = ...
    ERROR_NOT_DOS_DISK: int = ...
    ERROR_SECTOR_NOT_FOUND: int = ...
    ERROR_OUT_OF_PAPER: int = ...
    ERROR_WRITE_FAULT: int = ...
    ERROR_READ_FAULT: int = ...
    ERROR_GEN_FAILURE: int = ...
    ERROR_SHARING_VIOLATION: int = ...
    ERROR_LOCK_VIOLATION: int = ...
    ERROR_WRONG_DISK: int = ...
    ERROR_SHARING_BUFFER_EXCEEDED: int = ...
    ERROR_BAD_NETPATH: int = ...
    ERROR_NETWORK_ACCESS_DENIED: int = ...
    ERROR_BAD_NET_NAME: int = ...
    ERROR_FILE_EXISTS: int = ...
    ERROR_CANNOT_MAKE: int = ...
    ERROR_FAIL_I24: int = ...
    ERROR_NO_PROC_SLOTS: int = ...
    ERROR_DRIVE_LOCKED: int = ...
    ERROR_BROKEN_PIPE: int = ...
    ERROR_DISK_FULL: int = ...
    ERROR_INVALID_TARGET_HANDLE: int = ...
    ERROR_WAIT_NO_CHILDREN: int = ...
    ERROR_CHILD_NOT_COMPLETE: int = ...
    ERROR_DIRECT_ACCESS_HANDLE: int = ...
    ERROR_SEEK_ON_DEVICE: int = ...
    ERROR_DIR_NOT_EMPTY: int = ...
    ERROR_NOT_LOCKED: int = ...
    ERROR_BAD_PATHNAME: int = ...
    ERROR_MAX_THRDS_REACHED: int = ...
    ERROR_LOCK_FAILED: int = ...
    ERROR_ALREADY_EXISTS: int = ...
    ERROR_INVALID_STARTING_CODESEG: int = ...
    ERROR_INVALID_STACKSEG: int = ...
    ERROR_INVALID_MODULETYPE: int = ...
    ERROR_INVALID_EXE_SIGNATURE: int = ...
    ERROR_EXE_MARKED_INVALID: int = ...
    ERROR_BAD_EXE_FORMAT: int = ...
    ERROR_ITERATED_DATA_EXCEEDS_64k: int = ...
    ERROR_INVALID_MINALLOCSIZE: int = ...
    ERROR_DYNLINK_FROM_INVALID_RING: int = ...
    ERROR_IOPL_NOT_ENABLED: int = ...
    ERROR_INVALID_SEGDPL: int = ...
    ERROR_AUTODATASEG_EXCEEDS_64k: int = ...
    ERROR_RING2SEG_MUST_BE_MOVABLE: int = ...
    ERROR_RELOC_CHAIN_XEEDS_SEGLIM: int = ...
    ERROR_INFLOOP_IN_RELOC_CHAIN: int = ...
    ERROR_FILENAME_EXCED_RANGE: int = ...
    ERROR_NESTING_NOT_ALLOWED: int = ...
    ERROR_NO_DATA: int = ...
    ERROR_DIRECTORY: int = ...
    ERROR_NOT_ENOUGH_QUOTA: int = ...
    ERROR_INVALID_PARAMETER: int = ...
    ERROR_INVALID_NAME: int = ...
    ERROR_FILE_INVALID: int = ...
    ERROR_MAPPED_ALIGNMENT: int = ...

    # properties
    @property
    def filename(self) -> System.Object:
        ...
    @filename.setter
    def filename(self, val: System.Object):
        ...

    @property
    def winerror(self) -> System.Object:
        ...
    @winerror.setter
    def winerror(self, val: System.Object):
        ...

    @property
    def filename2(self) -> System.Object:
        ...
    @filename2.setter
    def filename2(self, val: System.Object):
        ...

    @property
    def characters_written(self) -> System.Object:
        ...
    @characters_written.setter
    def characters_written(self, val: System.Object):
        ...

    @property
    def errno(self) -> System.Object:
        ...
    @errno.setter
    def errno(self, val: System.Object):
        ...

    @property
    def strerror(self) -> System.Object:
        ...
    @strerror.setter
    def strerror(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    @staticmethod
    def __new__(cls: IronPython.Runtime.Types.PythonType, kwArgs: System.Collections.Generic.IDictionary[str, System.Object], args: System.Array[System.Object], ) -> System.Object:
        ...

    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

    @staticmethod
    def ErrnoToPythonType(errno: int, ) -> IronPython.Runtime.Types.PythonType:
        ...

    @staticmethod
    def WinErrorToErrno(winerror: int, ) -> int:
        ...

    def __str__(self, context: IronPython.Runtime.CodeContext, ) -> str:
        ...

class _UnicodeTranslateError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def start(self) -> System.Object:
        ...
    @start.setter
    def start(self, val: System.Object):
        ...

    @property
    def reason(self) -> System.Object:
        ...
    @reason.setter
    def reason(self, val: System.Object):
        ...

    @property
    def object(self) -> System.Object:
        ...
    @object.setter
    def object(self, val: System.Object):
        ...

    @property
    def end(self) -> System.Object:
        ...
    @end.setter
    def end(self, val: System.Object):
        ...

    @property
    def encoding(self) -> System.Object:
        ...
    @encoding.setter
    def encoding(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

    def ToString(self, ) -> str:
        ...

class _BlockingIOError(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions._OSError):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def filename(self) -> System.Object:
        ...
    @filename.setter
    def filename(self, val: System.Object):
        ...

    @property
    def winerror(self) -> System.Object:
        ...
    @winerror.setter
    def winerror(self, val: System.Object):
        ...

    @property
    def filename2(self) -> System.Object:
        ...
    @filename2.setter
    def filename2(self, val: System.Object):
        ...

    @property
    def characters_written(self) -> System.Object:
        ...
    @characters_written.setter
    def characters_written(self, val: System.Object):
        ...

    @property
    def errno(self) -> System.Object:
        ...
    @errno.setter
    def errno(self, val: System.Object):
        ...

    @property
    def strerror(self) -> System.Object:
        ...
    @strerror.setter
    def strerror(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

    def __init__(self, args: System.Array[System.Object], ) -> None:
        ...

class ExceptionDataWrapper(System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Value(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...

    # methods
    def __init__(self, value: IronPython.Runtime.Exceptions.PythonExceptions.BaseException, ):
        ...

class _StopAsyncIteration(IronPython.Runtime.ICodeFormattable, IronPython.Runtime.Types.IPythonObject, System.Dynamic.IDynamicMetaObjectProvider, IronPython.Runtime.IWeakReferenceable, IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def value(self) -> System.Object:
        ...
    @value.setter
    def value(self, val: System.Object):
        ...

    @property
    def args(self) -> System.Object:
        ...
    @args.setter
    def args(self, val: System.Object):
        ...

    @property
    def __dict__(self) -> IronPython.Runtime.PythonDictionary:
        ...
    @__dict__.setter
    def __dict__(self, val: IronPython.Runtime.PythonDictionary):
        ...

    @property
    def clsException(self) -> System.Exception:
        ...
    @clsException.setter
    def clsException(self, val: System.Exception):
        ...

    @property
    def __cause__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__cause__.setter
    def __cause__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __context__(self) -> IronPython.Runtime.Exceptions.PythonExceptions.BaseException:
        ...
    @__context__.setter
    def __context__(self, val: IronPython.Runtime.Exceptions.PythonExceptions.BaseException):
        ...

    @property
    def __suppress_context__(self) -> bool:
        ...
    @__suppress_context__.setter
    def __suppress_context__(self, val: bool):
        ...

    @property
    def __traceback__(self) -> IronPython.Runtime.Exceptions.TraceBack:
        ...
    @__traceback__.setter
    def __traceback__(self, val: IronPython.Runtime.Exceptions.TraceBack):
        ...

    @property
    def HasCause(self) -> bool:
        ...

    @property
    def IsImplicitException(self) -> bool:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, type: IronPython.Runtime.Types.PythonType, ):
        ...

