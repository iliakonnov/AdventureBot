from __future__ import annotations
import typing, abc, enum
from stubhelper import *

import IronPython.Compiler
import System
import System.Reflection
import IronPython.Runtime
import Microsoft.Scripting
import Microsoft.Scripting.Runtime
import System.IO
import System.Text
import System.Runtime.Serialization
import IronPython.Compiler.Ast
import System.Collections.Generic
import IronPython.Compiler.Parser


class OperatorToken(IronPython.Compiler.Token):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Precedence(self) -> int:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Image(self) -> str:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, kind: int, image: str, precedence: int, ):
        ...

class ConstantValueToken(IronPython.Compiler.Token):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Constant(self) -> System.Object:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Image(self) -> str:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, value: System.Object, ):
        ...

class PythonGlobal(System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields
    CurrentValueProperty: System.Reflection.PropertyInfo = ...
    RawValueProperty: System.Reflection.PropertyInfo = ...

    # properties
    @property
    def CurrentValue(self) -> System.Object:
        ...
    @CurrentValue.setter
    def CurrentValue(self, val: System.Object):
        ...

    @property
    def CurrentValueLightThrow(self) -> System.Object:
        ...

    @property
    def Name(self) -> str:
        ...

    @property
    def RawValue(self) -> System.Object:
        ...
    @RawValue.setter
    def RawValue(self, val: System.Object):
        ...

    @property
    def Display(self) -> str:
        ...

    # methods
    def __init__(self, context: IronPython.Runtime.CodeContext, name: str, ):
        ...

    def GetCachedValue(self, lightThrow: bool, ) -> System.Object:
        ...

    @staticmethod
    def GetStringDisplay(val: System.Object, ) -> str:
        ...

    def ToString(self, ) -> str:
        ...

class ErrorToken(IronPython.Compiler.Token):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Message(self) -> str:
        ...

    @property
    def Image(self) -> str:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, message: str, ):
        ...

class PythonCompilerOptions(Microsoft.Scripting.CompilerOptions):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def DontImplyDedent(self) -> bool:
        ...
    @DontImplyDedent.setter
    def DontImplyDedent(self, val: bool):
        ...

    @property
    def InitialIndent(self) -> System.Array[int]:
        ...
    @InitialIndent.setter
    def InitialIndent(self, val: System.Array[int]):
        ...

    @property
    def GeneratorStop(self) -> bool:
        ...
    @GeneratorStop.setter
    def GeneratorStop(self, val: bool):
        ...

    @property
    def Verbatim(self) -> bool:
        ...
    @Verbatim.setter
    def Verbatim(self, val: bool):
        ...

    @property
    def Interpreted(self) -> bool:
        ...
    @Interpreted.setter
    def Interpreted(self, val: bool):
        ...

    @property
    def Optimized(self) -> bool:
        ...
    @Optimized.setter
    def Optimized(self, val: bool):
        ...

    @property
    def Module(self) -> int:
        ...
    @Module.setter
    def Module(self, val: int):
        ...

    @property
    def ModuleName(self) -> str:
        ...
    @ModuleName.setter
    def ModuleName(self, val: str):
        ...

    @property
    def SkipFirstLine(self) -> bool:
        ...
    @SkipFirstLine.setter
    def SkipFirstLine(self, val: bool):
        ...

    @property
    def CompilationMode(self) -> IronPython.Compiler.CompilationMode:
        ...
    @CompilationMode.setter
    def CompilationMode(self, val: IronPython.Compiler.CompilationMode):
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, features: int, ):
        ...

class TokenKind(enum.Enum, System.IComparable, System.IFormattable, System.IConvertible, System.Enum):
    Error: int = ...
    NewLine: int = ...
    Indent: int = ...
    Dedent: int = ...
    Comment: int = ...
    Name: int = ...
    Constant: int = ...
    Dot: int = ...
    Add: int = ...
    AddEqual: int = ...
    Subtract: int = ...
    SubtractEqual: int = ...
    Power: int = ...
    PowerEqual: int = ...
    Multiply: int = ...
    MultiplyEqual: int = ...
    At: int = ...
    MatMult: int = ...
    MatMultEqual: int = ...
    FloorDivide: int = ...
    FloorDivideEqual: int = ...
    TrueDivide: int = ...
    TrueDivideEqual: int = ...
    Mod: int = ...
    ModEqual: int = ...
    LeftShift: int = ...
    LeftShiftEqual: int = ...
    RightShift: int = ...
    RightShiftEqual: int = ...
    BitwiseAnd: int = ...
    BitwiseAndEqual: int = ...
    BitwiseOr: int = ...
    BitwiseOrEqual: int = ...
    ExclusiveOr: int = ...
    ExclusiveOrEqual: int = ...
    LessThan: int = ...
    GreaterThan: int = ...
    LessThanOrEqual: int = ...
    GreaterThanOrEqual: int = ...
    Equals: int = ...
    NotEquals: int = ...
    LeftParenthesis: int = ...
    RightParenthesis: int = ...
    LeftBracket: int = ...
    RightBracket: int = ...
    LeftBrace: int = ...
    RightBrace: int = ...
    Comma: int = ...
    Colon: int = ...
    Semicolon: int = ...
    Assign: int = ...
    Twiddle: int = ...
    RightArrow: int = ...
    ReturnAnnotation: int = ...
    FirstKeyword: int = ...
    KeywordAnd: int = ...
    KeywordAssert: int = ...
    KeywordBreak: int = ...
    KeywordClass: int = ...
    KeywordContinue: int = ...
    KeywordDef: int = ...
    KeywordDel: int = ...
    KeywordElseIf: int = ...
    KeywordElse: int = ...
    KeywordExcept: int = ...
    KeywordFinally: int = ...
    KeywordFor: int = ...
    KeywordFrom: int = ...
    KeywordGlobal: int = ...
    KeywordIf: int = ...
    KeywordImport: int = ...
    KeywordIn: int = ...
    KeywordIs: int = ...
    KeywordLambda: int = ...
    KeywordNot: int = ...
    KeywordOr: int = ...
    KeywordPass: int = ...
    KeywordRaise: int = ...
    KeywordReturn: int = ...
    KeywordTry: int = ...
    KeywordWhile: int = ...
    KeywordYield: int = ...
    KeywordAs: int = ...
    KeywordWith: int = ...
    KeywordAsync: int = ...
    LastKeyword: int = ...
    KeywordNonlocal: int = ...
    NLToken: int = ...
    EndOfFile: int = ...

class Tokenizer(Microsoft.Scripting.Runtime.TokenizerService):
    @typing.overload
    def __init__(self, **kwargs):
        self._dontImplyDedent: bool
        ...

    # static fields

    # properties
    @property
    def IsRestartable(self) -> bool:
        ...

    @property
    def CurrentState(self) -> System.Object:
        ...

    @property
    def CurrentPosition(self) -> Microsoft.Scripting.SourceLocation:
        ...

    @property
    def SourceUnit(self) -> Microsoft.Scripting.SourceUnit:
        ...

    @property
    def ErrorSink(self) -> Microsoft.Scripting.ErrorSink:
        ...
    @ErrorSink.setter
    def ErrorSink(self, val: Microsoft.Scripting.ErrorSink):
        ...

    @property
    def IsEndOfFile(self) -> bool:
        ...

    @property
    def TokenSpan(self) -> Microsoft.Scripting.IndexSpan:
        ...

    @property
    def GroupingLevel(self) -> int:
        ...

    @property
    def EndContinues(self) -> bool:
        ...

    @property
    def TokenLength(self) -> int:
        ...

    @property
    def BufferTokenEnd(self) -> Microsoft.Scripting.SourceLocation:
        ...

    @property
    def BufferTokenSpan(self) -> Microsoft.Scripting.IndexSpan:
        ...

    @property
    def AtBeginning(self) -> bool:
        ...

    @property
    def CurrentIndex(self) -> int:
        ...

    # methods
    @typing.overload
    def __init__(self, ):
        ...

    @typing.overload
    def __init__(self, errorSink: Microsoft.Scripting.ErrorSink, ):
        ...

    @typing.overload
    def __init__(self, errorSink: Microsoft.Scripting.ErrorSink, options: IronPython.Compiler.PythonCompilerOptions, ):
        ...

    @typing.overload
    def __init__(self, errorSink: Microsoft.Scripting.ErrorSink, options: IronPython.Compiler.PythonCompilerOptions, verbatim: bool, ):
        ...

    def IndexToLocation(self, index: int, ) -> Microsoft.Scripting.SourceLocation:
        ...

    @typing.overload
    def Initialize(self, sourceUnit: Microsoft.Scripting.SourceUnit, ) -> None:
        ...

    @typing.overload
    def Initialize(self, state: System.Object, reader: System.IO.TextReader, sourceUnit: Microsoft.Scripting.SourceUnit, initialLocation: Microsoft.Scripting.SourceLocation, ) -> None:
        ...

    @typing.overload
    def Initialize(self, state: System.Object, reader: System.IO.TextReader, sourceUnit: Microsoft.Scripting.SourceUnit, initialLocation: Microsoft.Scripting.SourceLocation, bufferCapacity: int, ) -> None:
        ...

    @typing.overload
    def Initialize(self, state: System.Object, reader: System.IO.TextReader, sourceUnit: Microsoft.Scripting.SourceUnit, initialLocation: Microsoft.Scripting.SourceLocation, bufferCapacity: int, compilerOptions: IronPython.Compiler.PythonCompilerOptions, ) -> None:
        ...

    def ReadToken(self, ) -> Microsoft.Scripting.TokenInfo:
        ...

    def TryGetTokenString(self, len: int, tokenString: ref[str], ) -> bool:
        ...

    def GetNextToken(self, ) -> IronPython.Compiler.Token:
        ...

    def Next(self, ) -> IronPython.Compiler.Token:
        ...

    def SkipWhiteSpace(self, atBeginning: bool, ) -> int:
        ...

    def SkipSingleLineComment(self, ) -> int:
        ...

    def ReadSingleLineComment(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadNameOrString(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadNameOrFString(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadNameOrBytes(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadNameOrRawStringOrBytes(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadEof(self, ) -> IronPython.Compiler.Token:
        ...

    @staticmethod
    def BadChar(ch: int, ) -> IronPython.Compiler.ErrorToken:
        ...

    @staticmethod
    def IsNameStart(ch: int, ) -> bool:
        ...

    @staticmethod
    def IsNamePart(ch: int, ) -> bool:
        ...

    def ReadString(self, quote: str, isRaw: bool = ..., isUni: bool = ..., isBytes: bool = ..., isFormatted: bool = ..., ) -> IronPython.Compiler.Token:
        ...

    def ContinueString(self, quote: str, isRaw: bool, isUnicode: bool, isBytes: bool, isFormatted: bool, isTriple: bool, startAdd: int, ) -> IronPython.Compiler.Token:
        ...

    def MakeStringToken(self, quote: str, isRaw: bool, isUnicode: bool, isBytes: bool, isFormatted: bool, isTriple: bool, tokenStart: int, tokenLength: int, startAdd: int, endAdd: int, ) -> IronPython.Compiler.Token:
        ...

    def UnexpectedEndOfString(self, isTriple: bool, isIncomplete: bool, ) -> None:
        ...

    def ReadNumber(self, start: int, ) -> IronPython.Compiler.Token:
        ...

    def ReadBinaryNumber(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadOctalNumber(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadHexNumber(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadFraction(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadExponent(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadName(self, ) -> IronPython.Compiler.Token:
        ...

    def ReadNewline(self, ) -> bool:
        ...

    def CheckIndent(self, sb: System.Text.StringBuilder, ) -> None:
        ...

    def SetIndent(self, spaces: int, chars: System.Text.StringBuilder, ) -> None:
        ...

    def DoDedent(self, spaces: int, current: int, ) -> int:
        ...

    def ParseInteger(self, s: str, radix: int, ) -> System.Object:
        ...

    def ParseFloat(self, s: str, ) -> System.Object:
        ...

    @staticmethod
    def GetEncodingNameFromComment(line: str, ) -> str:
        ...

    @typing.overload
    def ReportSyntaxError(self, span: Microsoft.Scripting.SourceSpan, message: str, errorCode: int, ) -> None:
        ...

    @typing.overload
    def ReportSyntaxError(self, span: Microsoft.Scripting.IndexSpan, message: str, errorCode: int, ) -> None:
        ...

    def DumpBeginningOfUnit(self, ) -> None:
        ...

    @staticmethod
    @typing.overload
    def DumpToken(token: IronPython.Compiler.Token, ) -> None:
        ...

    @typing.overload
    def DumpToken(self, ) -> None:
        ...

    def GetLineLocations(self, ) -> System.Array[int]:
        ...

    @typing.overload
    def GetTokenSubstring(self, offset: int, ) -> str:
        ...

    @typing.overload
    def GetTokenSubstring(self, offset: int, length: int, ) -> str:
        ...

    def CheckInvariants(self, ) -> None:
        ...

    def Peek(self, ) -> int:
        ...

    def ReadLine(self, ) -> int:
        ...

    def MarkTokenEnd(self, ) -> None:
        ...

    def BufferBack(self, ) -> None:
        ...

    def GetTokenString(self, ) -> str:
        ...

    def SeekRelative(self, disp: int, ) -> None:
        ...

    @typing.overload
    def NextChar(self, ch: int, ) -> bool:
        ...

    @typing.overload
    def NextChar(self, ) -> int:
        ...

    def DiscardToken(self, ) -> None:
        ...

    def ReadEolnOpt(self, current: int, ) -> int:
        ...

    def IsEoln(self, current: int, ) -> bool:
        ...

    def RefillBuffer(self, ) -> None:
        ...

    @staticmethod
    def ResizeInternal(array: ref[System.Array[str]], newSize: int, start: int, count: int, ) -> None:
        ...

    def ClearInvalidChars(self, ) -> None:
        ...

    def NextOperator(self, ch: int, ) -> IronPython.Compiler.Token:
        ...

class PythonOperator(enum.Enum, System.IComparable, System.IFormattable, System.IConvertible, System.Enum):
    None_: int = ...
    Not: int = ...
    Pos: int = ...
    Invert: int = ...
    Negate: int = ...
    Add: int = ...
    Subtract: int = ...
    Multiply: int = ...
    MatMult: int = ...
    FloorDivide: int = ...
    TrueDivide: int = ...
    Mod: int = ...
    BitwiseAnd: int = ...
    BitwiseOr: int = ...
    Xor: int = ...
    ExclusiveOr: int = ...
    LeftShift: int = ...
    RightShift: int = ...
    Power: int = ...
    LessThan: int = ...
    LessThanOrEqual: int = ...
    GreaterThan: int = ...
    GreaterThanOrEqual: int = ...
    Equals: int = ...
    Equal: int = ...
    NotEqual: int = ...
    NotEquals: int = ...
    In: int = ...
    NotIn: int = ...
    IsNot: int = ...
    Is: int = ...

class CallTarget0(System.ICloneable, System.Runtime.Serialization.ISerializable, System.MulticastDelegate):
    @typing.overload
    def __init__(self, **kwargs):
        self._target: System.Object
        self._methodBase: System.Object
        self._methodPtr: System.IntPtr
        self._methodPtrAux: System.IntPtr
        ...

    # static fields

    # properties
    @property
    def Target(self) -> System.Object:
        ...

    @property
    def Method(self) -> System.Reflection.MethodInfo:
        ...

    # methods
    def __init__(self, object: System.Object, method: System.IntPtr, ):
        ...

    def Invoke(self, ) -> System.Object:
        ...

    def BeginInvoke(self, callback: System.AsyncCallback, object: System.Object, ) -> System.IAsyncResult:
        ...

    def EndInvoke(self, result: System.IAsyncResult, ) -> System.Object:
        ...

class IncompleteStringErrorToken(IronPython.Compiler.ErrorToken):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Image(self) -> str:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Message(self) -> str:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, message: str, value: str, ):
        ...

class SymbolToken(IronPython.Compiler.Token):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Symbol(self) -> str:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Image(self) -> str:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, kind: int, image: str, ):
        ...

class Token(System.Object, abc.ABC):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Kind(self) -> int:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    @abc.abstractmethod
    def Image(self) -> str:
        ...

    # methods
    def __init__(self, kind: int, ):
        ...

    def ToString(self, ) -> str:
        ...

class Parser(System.IDisposable, System.Object):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def ErrorSink(self) -> Microsoft.Scripting.ErrorSink:
        ...
    @ErrorSink.setter
    def ErrorSink(self, val: Microsoft.Scripting.ErrorSink):
        ...

    @property
    def ParserSink(self) -> Microsoft.Scripting.Runtime.ParserSink:
        ...
    @ParserSink.setter
    def ParserSink(self, val: Microsoft.Scripting.Runtime.ParserSink):
        ...

    @property
    def ErrorCode(self) -> int:
        ...

    @property
    def CurrentClass(self) -> IronPython.Compiler.Ast.ClassDefinition:
        ...

    @property
    def CurrentFunction(self) -> IronPython.Compiler.Ast.FunctionDefinition:
        ...

    @property
    def GeneratorStop(self) -> bool:
        ...

    # methods
    def __init__(self, context: Microsoft.Scripting.Runtime.CompilerContext, tokenizer: IronPython.Compiler.Tokenizer, errorSink: Microsoft.Scripting.ErrorSink, parserSink: Microsoft.Scripting.Runtime.ParserSink, languageFeatures: int, ):
        ...

    def ParseNotTest(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseComparison(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseExpr(self, precedence: int = ..., ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseFactor(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishUnaryNegate(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParsePower(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseAtom(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseFormattedString(self, t: IronPython.Compiler.FormattedStringToken, s: str, expressions: System.Collections.Generic.List[IronPython.Compiler.Ast.Expression], ) -> str:
        ...

    def FinishJoinedString(self, t: IronPython.Compiler.Token, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishStringPlus(self, s: str, ) -> str:
        ...

    def FinishBytesPlus(self, s: IronPython.Runtime.Bytes, ) -> IronPython.Runtime.Bytes:
        ...

    @typing.overload
    def AddTrailers(self, ret: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Expression:
        ...

    @typing.overload
    def AddTrailers(self, ret: IronPython.Compiler.Ast.Expression, allowGeneratorExpression: bool, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseSubscriptList(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseSliceEnd(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishSlice(self, e0: IronPython.Compiler.Ast.Expression, start: int, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseExprList(self, trailingComma: ref[bool], ) -> System.Collections.Generic.List[IronPython.Compiler.Ast.Expression]:
        ...

    def FinishArgListOrGenExpr(self, ) -> System.Collections.Generic.IReadOnlyList[IronPython.Compiler.Ast.Node]:
        ...

    def FinishKeywordArgument(self, t: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Keyword:
        ...

    def CheckUniqueArgument(self, names: System.Collections.Generic.List[IronPython.Compiler.Ast.Node], arg: IronPython.Compiler.Ast.Keyword, ) -> None:
        ...

    def FinishArgumentList(self, first: IronPython.Compiler.Ast.Node, ) -> System.Collections.Generic.IReadOnlyList[IronPython.Compiler.Ast.Node]:
        ...

    @typing.overload
    def ParseTestList(self, trailingComma: ref[bool], ) -> System.Collections.Generic.List[IronPython.Compiler.Ast.Expression]:
        ...

    @typing.overload
    def ParseTestList(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseStarExpr(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseTestListStarExpr(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseTestListError(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishExpressionListAsExpr(self, expr: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishTupleOrGenExp(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseGeneratorExpression(self, expr: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Expression:
        ...

    @staticmethod
    def NestGenExpr(current: IronPython.Compiler.Ast.Statement, nested: IronPython.Compiler.Ast.Statement, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseGenExprFor(self, ) -> IronPython.Compiler.Ast.ForStatement:
        ...

    def ParseGenExprIf(self, ) -> IronPython.Compiler.Ast.IfStatement:
        ...

    def FinishDictOrSetValue(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishSetComp(self, item: IronPython.Compiler.Ast.Expression, oStart: int, oEnd: int, ) -> IronPython.Compiler.Ast.SetComprehension:
        ...

    def FinishDictComp(self, key: IronPython.Compiler.Ast.Expression, value: IronPython.Compiler.Ast.Expression, oStart: int, oEnd: int, ) -> IronPython.Compiler.Ast.DictionaryComprehension:
        ...

    def ParseCompIter(self, ) -> System.Array[IronPython.Compiler.Ast.ComprehensionIterator]:
        ...

    def ParseCompFor(self, ) -> IronPython.Compiler.Ast.ComprehensionFor:
        ...

    def FinishListValue(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseCompIf(self, ) -> IronPython.Compiler.Ast.ComprehensionIf:
        ...

    @typing.overload
    def MakeTupleOrExpr(self, l: System.Collections.Generic.List[IronPython.Compiler.Ast.Expression], trailingComma: bool, ) -> IronPython.Compiler.Ast.Expression:
        ...

    @typing.overload
    def MakeTupleOrExpr(self, l: System.Collections.Generic.List[IronPython.Compiler.Ast.Expression], trailingComma: bool, expandable: bool, ) -> IronPython.Compiler.Ast.Expression:
        ...

    @staticmethod
    def NeverTestToken(t: IronPython.Compiler.Token, ) -> bool:
        ...

    def PopClass(self, ) -> IronPython.Compiler.Ast.ClassDefinition:
        ...

    def PushClass(self, clazz: IronPython.Compiler.Ast.ClassDefinition, ) -> None:
        ...

    def PopFunction(self, ) -> IronPython.Compiler.Ast.FunctionDefinition:
        ...

    def PushFunction(self, function: IronPython.Compiler.Ast.FunctionDefinition, ) -> None:
        ...

    def FinishCallExpr(self, target: IronPython.Compiler.Ast.Expression, args: System.Collections.Generic.IEnumerable[IronPython.Compiler.Ast.Node], ) -> IronPython.Compiler.Ast.CallExpression:
        ...

    def SplitAndValidateArguments(self, args: System.Collections.Generic.IEnumerable[IronPython.Compiler.Ast.Node], posargs: ref[System.Collections.Generic.List[IronPython.Compiler.Ast.Expression]], kwargs: ref[System.Collections.Generic.List[IronPython.Compiler.Ast.Keyword]], ) -> None:
        ...

    def Dispose(self, ) -> None:
        ...

    def ParseFileWorker(self, makeModule: bool, returnValue: bool, ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    def InternalParseInteractiveInput(self, parsingMultiLineCmpdStmt: ref[bool], isEmptyStmt: ref[bool], ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseTestListAsExpression(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def MaybeEatNewLine(self, ) -> bool:
        ...

    def EatNewLine(self, ) -> bool:
        ...

    def EatEndOfInput(self, ) -> IronPython.Compiler.Token:
        ...

    def BadSourceError(self, dfe: System.Text.DecoderFallbackException, ) -> System.Exception:
        ...

    def StartParsing(self, ) -> None:
        ...

    def GetEnd(self, ) -> int:
        ...

    def GetStart(self, ) -> int:
        ...

    def GetSourceSpan(self, ) -> Microsoft.Scripting.SourceSpan:
        ...

    def NextToken(self, ) -> IronPython.Compiler.Token:
        ...

    @typing.overload
    def PeekToken(self, ) -> IronPython.Compiler.Token:
        ...

    @typing.overload
    def PeekToken(self, kind: int, ) -> bool:
        ...

    @typing.overload
    def PeekToken(self, check: IronPython.Compiler.Token, ) -> bool:
        ...

    def FetchLookahead(self, ) -> None:
        ...

    def Eat(self, kind: int, ) -> bool:
        ...

    def EatNoEof(self, kind: int, ) -> bool:
        ...

    def MaybeEat(self, kind: int, ) -> bool:
        ...

    @staticmethod
    def CreateParser(context: Microsoft.Scripting.Runtime.CompilerContext, options: IronPython.Runtime.PythonOptions, ) -> IronPython.Compiler.Parser:
        ...

    @typing.overload
    def ParseFile(self, makeModule: bool, ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    @typing.overload
    def ParseFile(self, makeModule: bool, returnValue: bool, ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    def TryParseExpression(self, code: str, expression: ref[IronPython.Compiler.Ast.Expression], ) -> bool:
        ...

    def ParseInteractiveCode(self, properties: ref[int], ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    def FinishParsing(self, ret: IronPython.Compiler.Ast.Statement, ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    def ParseSingleStatement(self, ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    def ParseTopExpression(self, ) -> IronPython.Compiler.Ast.PythonAst:
        ...

    @staticmethod
    def GetNextAutoIndentSize(text: str, autoIndentTabWidth: int, ) -> int:
        ...

    @typing.overload
    def Reset(self, sourceUnit: Microsoft.Scripting.SourceUnit, languageFeatures: int, ) -> None:
        ...

    @typing.overload
    def Reset(self, ) -> None:
        ...

    @typing.overload
    def ReportSyntaxError(self, t: IronPython.Compiler.TokenWithSpan, errorCode: int = ..., ) -> None:
        ...

    @typing.overload
    def ReportSyntaxError(self, t: IronPython.Compiler.Token, span: Microsoft.Scripting.IndexSpan, errorCode: int, allowIncomplete: bool, ) -> None:
        ...

    @typing.overload
    def ReportSyntaxError(self, message: str, ) -> None:
        ...

    @typing.overload
    def ReportSyntaxError(self, start: int, end: int, message: str, errorCode: int = ..., ) -> None:
        ...

    @staticmethod
    def GetErrorMessage(t: IronPython.Compiler.Token, errorCode: int, ) -> str:
        ...

    @staticmethod
    def IsPrivateName(name: str, ) -> bool:
        ...

    def FixName(self, name: str, ) -> str:
        ...

    def ReadName(self, ) -> str:
        ...

    def ParseStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseSimpleStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseSmallStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseDelStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseReturnStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def FinishSmallStmt(self, stmt: IronPython.Compiler.Ast.Statement, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseYieldStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseYieldExpression(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishAssignments(self, right: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseExprStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def GetAssignOperator(self, t: IronPython.Compiler.Token, ) -> int:
        ...

    def GetBinaryOperator(self, token: IronPython.Compiler.OperatorToken, ) -> int:
        ...

    def ParseImportStmt(self, ) -> IronPython.Compiler.Ast.ImportStatement:
        ...

    def ParseModuleName(self, ) -> IronPython.Compiler.Ast.ModuleName:
        ...

    def ParseRelativeModuleName(self, ) -> IronPython.Compiler.Ast.ModuleName:
        ...

    def ReadNames(self, ) -> System.Array[str]:
        ...

    def ParseFromImportStmt(self, ) -> IronPython.Compiler.Ast.FromImportStatement:
        ...

    def ParseAsNameList(self, l: System.Collections.Generic.List[str], las: System.Collections.Generic.List[str], ) -> None:
        ...

    def MaybeParseAsName(self, ) -> str:
        ...

    def ParseNonLocalStmt(self, ) -> IronPython.Compiler.Ast.NonlocalStatement:
        ...

    def ParseGlobalStmt(self, ) -> IronPython.Compiler.Ast.GlobalStatement:
        ...

    def ParseRaiseStmt(self, ) -> IronPython.Compiler.Ast.RaiseStatement:
        ...

    def ParseAssertStmt(self, ) -> IronPython.Compiler.Ast.AssertStatement:
        ...

    def SetPrivatePrefix(self, name: str, ) -> str:
        ...

    @staticmethod
    def GetPrivatePrefix(name: str, ) -> str:
        ...

    def Error(self, ) -> IronPython.Compiler.Ast.ErrorExpression:
        ...

    def ErrorStmt(self, ) -> IronPython.Compiler.Ast.ExpressionStatement:
        ...

    def ParseClassDef(self, ) -> IronPython.Compiler.Ast.ClassDefinition:
        ...

    def ParseDecorators(self, ) -> System.Collections.Generic.List[IronPython.Compiler.Ast.Expression]:
        ...

    def ParseDecorated(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseFuncDef(self, isAsync: bool = ..., ) -> IronPython.Compiler.Ast.FunctionDefinition:
        ...

    def CheckUniqueParameter(self, names: System.Collections.Generic.HashSet[str], name: str, ) -> None:
        ...

    def ParseParameterList(self, terminator: int, allowAnnotations: bool, ) -> System.Array[IronPython.Compiler.Ast.Parameter]:
        ...

    def ParseDefParameter(self, names: System.Collections.Generic.HashSet[str], parameterKind: int, allowAnnotations: bool, needDefault: ref[bool], ) -> IronPython.Compiler.Ast.Parameter:
        ...

    def ParseParameter(self, names: System.Collections.Generic.HashSet[str], parameterKind: int, allowAnnotations: bool, ) -> IronPython.Compiler.Ast.Parameter:
        ...

    def CompleteParameterName(self, node: IronPython.Compiler.Ast.Node, name: str, names: System.Collections.Generic.HashSet[str], ) -> None:
        ...

    def FinishLambdefNoCond(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def FinishLambdef(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseLambdaHelperStart(self, name: str, ) -> IronPython.Compiler.Ast.FunctionDefinition:
        ...

    def ParseLambdaHelperEnd(self, func: IronPython.Compiler.Ast.FunctionDefinition, expr: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseWhileStmt(self, ) -> IronPython.Compiler.Ast.WhileStatement:
        ...

    def ParseWithStmt(self, ) -> IronPython.Compiler.Ast.WithStatement:
        ...

    def ParseWithItem(self, ) -> IronPython.Compiler.Parser.WithItem:
        ...

    def ParseAsyncStmt(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseForStmt(self, ) -> IronPython.Compiler.Ast.ForStatement:
        ...

    def ParseLoopSuite(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseClassOrFuncBody(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseIfStmt(self, ) -> IronPython.Compiler.Ast.IfStatement:
        ...

    def ParseIfStmtTest(self, ) -> IronPython.Compiler.Ast.IfStatementTest:
        ...

    def ParseTryStatement(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def ParseFinallySuite(self, finallySuite: IronPython.Compiler.Ast.Statement, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def MarkFunctionContainsFinally(self, ) -> None:
        ...

    def ParseTryStmtHandler(self, ) -> IronPython.Compiler.Ast.TryStatementHandler:
        ...

    def ParseSuite(self, ) -> IronPython.Compiler.Ast.Statement:
        ...

    def CheckSuiteEofError(self, cur: IronPython.Compiler.TokenWithSpan, ) -> None:
        ...

    def ParseTestNoCond(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseTest(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseOrTest(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseConditionalTest(self, trueExpr: IronPython.Compiler.Ast.Expression, ) -> IronPython.Compiler.Ast.Expression:
        ...

    def ParseAndTest(self, ) -> IronPython.Compiler.Ast.Expression:
        ...

class CommentToken(IronPython.Compiler.Token):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Comment(self) -> str:
        ...

    @property
    def Image(self) -> str:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, comment: str, ):
        ...

class NameToken(IronPython.Compiler.Token):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields

    # properties
    @property
    def Name(self) -> str:
        ...

    @property
    def Value(self) -> System.Object:
        ...

    @property
    def Image(self) -> str:
        ...

    @property
    def Kind(self) -> int:
        ...

    # methods
    def __init__(self, name: str, ):
        ...

class LookupCompilationDelegate(System.ICloneable, System.Runtime.Serialization.ISerializable, System.MulticastDelegate):
    @typing.overload
    def __init__(self, **kwargs):
        self._target: System.Object
        self._methodBase: System.Object
        self._methodPtr: System.IntPtr
        self._methodPtrAux: System.IntPtr
        ...

    # static fields

    # properties
    @property
    def Target(self) -> System.Object:
        ...

    @property
    def Method(self) -> System.Reflection.MethodInfo:
        ...

    # methods
    def __init__(self, object: System.Object, method: System.IntPtr, ):
        ...

    def Invoke(self, context: IronPython.Runtime.CodeContext, code: IronPython.Runtime.FunctionCode, ) -> System.Object:
        ...

    def BeginInvoke(self, context: IronPython.Runtime.CodeContext, code: IronPython.Runtime.FunctionCode, callback: System.AsyncCallback, object: System.Object, ) -> System.IAsyncResult:
        ...

    def EndInvoke(self, result: System.IAsyncResult, ) -> System.Object:
        ...

class Tokens(System.Object, abc.ABC):
    @typing.overload
    def __init__(self, **kwargs):
        ...

    # static fields
    EndOfFileToken: IronPython.Compiler.Token = ...
    NewLineToken: IronPython.Compiler.Token = ...
    NLToken: IronPython.Compiler.Token = ...
    IndentToken: IronPython.Compiler.Token = ...
    DedentToken: IronPython.Compiler.Token = ...
    CommentToken: IronPython.Compiler.Token = ...
    NoneToken: IronPython.Compiler.Token = ...
    TrueToken: IronPython.Compiler.Token = ...
    FalseToken: IronPython.Compiler.Token = ...
    DotToken: IronPython.Compiler.Token = ...

    # properties
    @property
    def AddToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def AddEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def SubtractToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def SubtractEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def PowerToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def PowerEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def MultiplyToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def MultiplyEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def MatMultToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def MatMultEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def FloorDivideToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def FloorDivideEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def TrueDivideToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def TrueDivideEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def ModToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def ModEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LeftShiftToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LeftShiftEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def RightShiftToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def RightShiftEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def BitwiseAndToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def BitwiseAndEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def BitwiseOrToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def BitwiseOrEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def ExclusiveOrToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def ExclusiveOrEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LessThanToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def GreaterThanToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LessThanOrEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def GreaterThanOrEqualToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def EqualsToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def NotEqualsToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LeftParenthesisToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def RightParenthesisToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LeftBracketToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def RightBracketToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def LeftBraceToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def RightBraceToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def CommaToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def ColonToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def SemicolonToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def AssignToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def TwiddleToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def RightArrowToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def ReturnAnnotationToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordAndToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordAsToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordAssertToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordAsyncToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordBreakToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordClassToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordContinueToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordDefToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordDelToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordElseIfToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordElseToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordExceptToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordFinallyToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordForToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordFromToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordGlobalToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordIfToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordImportToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordInToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordIsToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordLambdaToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordNonlocalToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordNotToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordOrToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordPassToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordRaiseToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordReturnToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordTryToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordWhileToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordWithToken(self) -> IronPython.Compiler.Token:
        ...

    @property
    def KeywordYieldToken(self) -> IronPython.Compiler.Token:
        ...

    # methods
